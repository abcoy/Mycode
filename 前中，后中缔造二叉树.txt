#include<iostream>
using namespace std;
struct BTNode
{
	char data;
	BTNode* lchild, *rchild;
};
BTNode* CreateBT1(const char* pre, const char* in, int n);
BTNode* CreateBT2(const char* post, const char* in, int n);
void PreOrderDisPlay(const BTNode* Tree);
void InOrderDisPlay(const BTNode* Tree);
void PostOrderDisplay(const BTNode* Tree);
int main(void)
{
	cout << "CreateBT1:\n ";
	BTNode* Treee = CreateBT1("ABDGCEF","DGBAECF",8);
	cout << "前序遍历: ";
	PreOrderDisPlay(Treee);
	cout << endl;
	cout << "中序遍历: ";
	InOrderDisPlay(Treee);
	cout << "\nCreateBT2: ";
	BTNode* Tree = CreateBT2("GDBEFCA", "DGBAECF", 8);
	cout << "\n中序遍历: ";
	InOrderDisPlay(Tree);
	cout << endl;
	cout << "后序遍历: ";
	PostOrderDisplay(Tree);
	return 0;
	
	
}
BTNode* CreateBT1(const char* pre, const char* in, int n)
{
	BTNode* node = new BTNode;
	if (n <= 0)
		return nullptr;
	node->data = *pre;
	const char* p;
	for (p = in; p < in + n; p++)
		if (*p == *pre)//只有先找到父节点才能确认他的孩子节点
			break;
	int k = p - in;
	node->lchild = CreateBT1(pre + 1, in, k);//前序便利里面只有左子树就在左边，右子树就在右边，但是第一个节点是根节点.
	node->rchild = CreateBT1(pre + k + 1, p + 1, n - k - 1);//pre+k+1是跳到第一个右节点，p+1也是在中序里面跳到第一个右节点n-k-是右子树的节点个数
	return node;

 }
BTNode* CreateBT2(const char* post, const char* in, int n)
{
	BTNode* node = new BTNode;
	if (n <= 0)
		return nullptr;
	
	char r = *(post + n - 1);
	node->data = r;
	const char* p;
	for (p = in; p < in + n; p++)
		if (*p == r)//找到父节点 才能在中序里确认他的孩子节点
			break;
	int k = p - in;
	node->lchild=CreateBT2(post, in, k);//post没有动因为post 开头就是左子树，k是左子树的节点个数。
	node->rchild = CreateBT2(post + k, p + 1, n - k - 1);//post指针移到属于右子树的一端,n-1-k是右子树的节点数
	return node;

}
void PreOrderDisPlay(const BTNode* Tree)
{
	if (!Tree)
		return;
	cout << Tree->data;
	PreOrderDisPlay(Tree->lchild);
	PreOrderDisPlay(Tree->rchild);
}
void InOrderDisPlay(const BTNode* Tree)
{
	if (!Tree)
		return;
	InOrderDisPlay(Tree->lchild);
	cout << Tree->data;
	InOrderDisPlay(Tree->rchild);
}

void PostOrderDisplay(const BTNode* Tree)
{
	if (!Tree)
		return;
	PostOrderDisplay(Tree->lchild);
	PostOrderDisplay(Tree->rchild);
	cout << Tree->data;
}
