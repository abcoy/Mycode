
//最长递增子序列.
//输入：nums = [10, 9, 2, 5, 3, 7, 101, 18]
//输出：4
//解释：最长递增子序列是[2, 3, 7, 101]，因此长度为 4
int lengthOfLIS(vector<int>& nums) {
    vector<int>L(nums.size(), 1);
    for (int i = nums.size() - 1; i >= 0; i--)//从最后面开始计算后面元素开头的递增序列长度
        for (int j = i + 1; j < nums.size(); j++)//递增在一个元素的后面的元素
        {
            if (nums[j] > nums[i])//如果后面的元素比这个元素更大的话
                              //那么以更大元素开头的递增序列长度跟这个元素取最长的递增序列长度。
            {
                L[i] = max(L[i], L[j] + 1);
            }
        }
    //举个例如 1 5 2 4 3
    //外层第一次循环先遍历 3 3没有其他元素 所以 L[4] = 1;
    //外层第二次循环 遍历4 4比3大后面没有其他元素可以和4形成递增序列 所以L[3] = 1
    //外层第三次循环 遍历2 以2为首的话，可以4 也可以3，以4为首的递增序列长度为1，以3为首的递增序列长度为1，所以 L[2] 同时也要对 L[4]和L[3]进行比较一下才知道哪个更长，先和4（L[4]）比，在和3（L[3])比
    //。。。。。。一次循环下去 ，因为前面的比较都在后面的基础上 所以不用进行重复计算
    return *max_element(L.begin(), L.end());

}